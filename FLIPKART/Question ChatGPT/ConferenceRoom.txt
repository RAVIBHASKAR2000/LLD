import java.util.*;

class TimeSlot {
    int start;
    int end;

    public TimeSlot(int start, int end) {
        this.start = start;
        this.end = end;
    }

    public boolean overlaps(TimeSlot other) {
        return !(this.end <= other.start || other.end <= this.start);
    }

    public String toString() {
        return start + ":" + end;
    }
}

class ConferenceRoom {
    String id;
    List<TimeSlot> bookings;

    public ConferenceRoom(String id) {
        this.id = id;
        this.bookings = new ArrayList<>();
    }

    public boolean isAvailable(TimeSlot slot) {
        for (TimeSlot booked : bookings) {
            if (booked.overlaps(slot)) return false;
        }
        return true;
    }

    public boolean book(TimeSlot slot) {
        if (isAvailable(slot)) {
            bookings.add(slot);
            return true;
        }
        return false;
    }

    public boolean cancel(TimeSlot slot) {
        return bookings.removeIf(b -> b.start == slot.start && b.end == slot.end);
    }

    public List<TimeSlot> getBookings() {
        return bookings;
    }
}

class Floor {
    String name;
    Map<String, ConferenceRoom> rooms = new HashMap<>();

    public Floor(String name) {
        this.name = name;
    }

    public void addRoom(String roomId) {
        rooms.put(roomId.toLowerCase(), new ConferenceRoom(roomId.toLowerCase()));
    }

    public ConferenceRoom getRoom(String roomId) {
        return rooms.get(roomId.toLowerCase());
    }

    public List<ConferenceRoom> getAvailableRooms(TimeSlot slot) {
        List<ConferenceRoom> available = new ArrayList<>();
        for (ConferenceRoom room : rooms.values()) {
            if (room.isAvailable(slot)) available.add(room);
        }
        return available;
    }

    public Collection<ConferenceRoom> getRooms() {
        return rooms.values();
    }
}

class Building {
    String name;
    Map<String, Floor> floors = new HashMap<>();

    public Building(String name) {
        this.name = name;
    }

    public void addFloor(String floorName) {
        floors.put(floorName.toLowerCase(), new Floor(floorName.toLowerCase()));
    }

    public Floor getFloor(String floorName) {
        return floors.get(floorName.toLowerCase());
    }
}

class ConferenceRoomManager {
    Map<String, Building> buildings = new HashMap<>();
    List<String> bookingHistory = new ArrayList<>();

    public void addBuilding(String buildingName) {
        buildings.put(buildingName.toLowerCase(), new Building(buildingName.toLowerCase()));
        System.out.println("Added building " + buildingName + " into the system.");
    }

    public void addFloor(String building, String floor) {
        Building b = buildings.get(building.toLowerCase());
        if (b != null) {
            b.addFloor(floor);
            System.out.println("Added floor " + floor + " into building " + building);
        }
    }

    public void addConfRoom(String building, String floor, String roomId) {
        Building b = buildings.get(building.toLowerCase());
        if (b != null) {
            Floor f = b.getFloor(floor);
            if (f != null) {
                f.addRoom(roomId);
                System.out.println("Added conference room " + roomId + " on " + floor + " in " + building);
            }
        }
    }

    public void bookRoom(String slot, String building, String floor, String roomId) {
        TimeSlot t = parseSlot(slot);
        ConferenceRoom room = getRoom(building, floor, roomId);
        if (room != null && room.book(t)) {
            bookingHistory.add(slot + " " + floor + " " + building + " " + roomId);
            System.out.println("Room booked successfully.");
        } else {
            System.out.println("Booking failed. Slot unavailable or room not found.");
        }
    }

    public void cancelBooking(String slot, String building, String floor, String roomId) {
        TimeSlot t = parseSlot(slot);
        ConferenceRoom room = getRoom(building, floor, roomId);
        if (room != null && room.cancel(t)) {
            bookingHistory.remove(slot + " " + floor + " " + building + " " + roomId);
            System.out.println("Booking cancelled.");
        } else {
            System.out.println("Cancellation failed. Booking not found.");
        }
    }

    public void listBookings(String building, String floor) {
        for (String b : bookingHistory) {
            if (b.contains(floor.toLowerCase()) && b.contains(building.toLowerCase())) {
                System.out.println(b);
            }
        }
    }

    public void search(String slot, String building, String floor) {
        TimeSlot t = parseSlot(slot);
        Floor f = buildings.get(building.toLowerCase()).getFloor(floor);
        if (f != null) {
            List<ConferenceRoom> available = f.getAvailableRooms(t);
            if (available.isEmpty()) {
                System.out.println("No Rooms available");
            } else {
                for (ConferenceRoom r : available) {
                    System.out.println(r.id);
                }
            }
        }
    }

    private TimeSlot parseSlot(String s) {
        String[] parts = s.split(":");
        return new TimeSlot(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));
    }

    private ConferenceRoom getRoom(String building, String floor, String roomId) {
        Building b = buildings.get(building.toLowerCase());
        if (b != null) {
            Floor f = b.getFloor(floor);
            if (f != null) return f.getRoom(roomId);
        }
        return null;
    }
}

public class Driver {
    public static void main(String[] args) {
        ConferenceRoomManager manager = new ConferenceRoomManager();

        manager.addBuilding("Flipkart1");
        manager.addFloor("Flipkart1", "FirstFloor");
        manager.addConfRoom("Flipkart1", "FirstFloor", "C1");
        manager.addConfRoom("Flipkart1", "FirstFloor", "C2");

        manager.bookRoom("2:4", "Flipkart1", "FirstFloor", "C1");
        manager.bookRoom("4:5", "Flipkart1", "FirstFloor", "C1");
        manager.bookRoom("3:4", "Flipkart1", "FirstFloor", "C2");

        manager.listBookings("Flipkart1", "FirstFloor");

        manager.search("2:3", "Flipkart1", "FirstFloor");

        manager.cancelBooking("2:4", "Flipkart1", "FirstFloor", "C1");
        manager.listBookings("Flipkart1", "FirstFloor");
    }
}
