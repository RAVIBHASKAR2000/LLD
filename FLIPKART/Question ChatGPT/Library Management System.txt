// Library Management System - In-Memory Implementation

import java.util.*;
import java.time.*;

class Book {
    String id;
    String name;
    String author;
    int totalCopies;
    int availableCopies;
    Queue<String> waitlist = new LinkedList<>();
    Set<String> issuedTo = new HashSet<>();

    public Book(String name, String author, int totalCopies) {
        this.name = name;
        this.author = author;
        this.totalCopies = totalCopies;
        this.availableCopies = totalCopies;
        this.id = generateBookId(author);
    }

    private String generateBookId(String author) {
        String lastName = author.trim().split(" ")[1];
        String prefix = lastName.length() >= 3 ? lastName.substring(0, 3).toUpperCase() : lastName.toUpperCase();
        return prefix + UUID.randomUUID().toString().substring(0, 4).toUpperCase();
    }
}

class User {
    String userId;
    String name;
    Map<String, LocalDate> borrowedBooks = new HashMap<>();

    public User(String userId, String name) {
        this.userId = userId;
        this.name = name;
    }
}

class LibrarySystem {
    Map<String, Book> bookCatalog = new HashMap<>();
    Map<String, User> users = new HashMap<>();

    public void addBook(String name, String author, int copies) {
        Book book = new Book(name, author, copies);
        bookCatalog.put(book.id, book);
        System.out.println("Added book: " + book.name + " with ID: " + book.id);
    }

    public void registerUser(String userId, String name) {
        users.put(userId, new User(userId, name));
        System.out.println("Registered user: " + name);
    }

    public void unregisterUser(String userId) {
        users.remove(userId);
        System.out.println("Unregistered user: " + userId);
    }

    public void reserveBook(String userId, String bookId) {
        User user = users.get(userId);
        Book book = bookCatalog.get(bookId);

        if (user == null || book == null) {
            System.out.println("Invalid user or book ID");
            return;
        }

        if (user.borrowedBooks.containsKey(bookId)) {
            System.out.println("User already borrowed this book.");
            return;
        }

        if (book.issuedTo.contains(userId) || book.waitlist.contains(userId)) {
            System.out.println("User already in waitlist or issued.");
            return;
        }

        if (book.availableCopies > 0 && (book.waitlist.isEmpty() || book.waitlist.peek().equals(userId))) {
            book.availableCopies--;
            user.borrowedBooks.put(bookId, LocalDate.now());
            book.issuedTo.add(userId);
            book.waitlist.remove(userId);
            System.out.println("Book reserved for user: " + userId);
        } else {
            book.waitlist.add(userId);
            System.out.println("Added to waitlist.");
        }
    }

    public void returnBook(String userId, String bookId) {
        User user = users.get(userId);
        Book book = bookCatalog.get(bookId);

        if (user == null || book == null || !user.borrowedBooks.containsKey(bookId)) {
            System.out.println("Invalid return request");
            return;
        }

        LocalDate borrowedDate = user.borrowedBooks.remove(bookId);
        long daysBorrowed = ChronoUnit.DAYS.between(borrowedDate, LocalDate.now());

        if (daysBorrowed > 14) {
            long fine = (daysBorrowed - 14) * 20;
            System.out.println("Fine for late return: Rs." + fine);
        }

        book.issuedTo.remove(userId);
        if (!book.waitlist.isEmpty()) {
            String nextUser = book.waitlist.peek();
            reserveBook(nextUser, bookId);
        } else {
            book.availableCopies++;
        }

        System.out.println("Book returned successfully");
    }

    public void getUsersWithBook(String bookId) {
        Book book = bookCatalog.get(bookId);
        if (book != null) {
            System.out.println("Users with book ID " + bookId + ": " + book.issuedTo);
        }
    }

    public void getBooksIssuedToUser(String userId) {
        User user = users.get(userId);
        if (user != null) {
            System.out.println("Books issued to user " + userId + ": " + user.borrowedBooks.keySet());
        }
    }
}

public class LibraryDemo {
    public static void main(String[] args) {
        LibrarySystem library = new LibrarySystem();

        library.registerUser("U1", "Alice");
        library.registerUser("U2", "Bob");

        library.addBook("Harry Potter", "J.K. Rowling", 1);
        library.addBook("Fantastic Beasts", "J.K. Rowling", 2);

        String bookId = library.bookCatalog.values().stream().filter(b -> b.name.equals("Harry Potter")).findFirst().get().id;

        library.reserveBook("U1", bookId);
        library.reserveBook("U2", bookId);
        library.returnBook("U1", bookId);
        library.getUsersWithBook(bookId);
        library.getBooksIssuedToUser("U2");
    }
}
