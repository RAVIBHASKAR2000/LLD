import java.util.*;

class User {
    String name;
    String gender;
    int age;
    List<Vehicle> vehicles = new ArrayList<>();
    int ridesOffered = 0;
    int ridesTaken = 0;

    public User(String name, String gender, int age) {
        this.name = name;
        this.gender = gender;
        this.age = age;
    }

    public void addVehicle(Vehicle v) {
        vehicles.add(v);
    }
}

class Vehicle {
    String model;
    String number;
    String owner;

    public Vehicle(String model, String number, String owner) {
        this.model = model;
        this.number = number;
        this.owner = owner;
    }
}

class Ride {
    String owner;
    Vehicle vehicle;
    String origin;
    String destination;
    int availableSeats;
    boolean isActive = true;
    List<String> passengers = new ArrayList<>();

    public Ride(String owner, Vehicle vehicle, String origin, String destination, int seats) {
        this.owner = owner;
        this.vehicle = vehicle;
        this.origin = origin;
        this.destination = destination;
        this.availableSeats = seats;
    }

    public boolean canAccommodate(int seats) {
        return isActive && availableSeats >= seats;
    }

    public void addPassenger(String passenger, int seats) {
        availableSeats -= seats;
        passengers.add(passenger);
    }
}

interface RideSelectionStrategy {
    Ride select(List<Ride> rides);
}

class PreferredVehicleStrategy implements RideSelectionStrategy {
    String preferredVehicle;

    public PreferredVehicleStrategy(String vehicle) {
        this.preferredVehicle = vehicle;
    }

    public Ride select(List<Ride> rides) {
        for (Ride r : rides) {
            if (r.vehicle.model.equalsIgnoreCase(preferredVehicle)) {
                return r;
            }
        }
        return null;
    }
}

class MostVacantStrategy implements RideSelectionStrategy {
    public Ride select(List<Ride> rides) {
        Ride max = null;
        for (Ride r : rides) {
            if (max == null || r.availableSeats > max.availableSeats) {
                max = r;
            }
        }
        return max;
    }
}

class RideManager {
    Map<String, User> users = new HashMap<>();
    List<Ride> offeredRides = new ArrayList<>();

    public void addUser(String name, String gender, int age) {
        users.put(name, new User(name, gender, age));
    }

    public void addVehicle(String user, String model, String number) {
        User u = users.get(user);
        if (u != null) {
            u.addVehicle(new Vehicle(model, number, user));
        }
    }

    public void offerRide(String user, String origin, String dest, int seats, String model, String number) {
        User u = users.get(user);
        if (u != null) {
            for (Ride r : offeredRides) {
                if (r.owner.equals(user) && r.vehicle.number.equals(number) && r.isActive) {
                    System.out.println("Ride already active with this vehicle.");
                    return;
                }
            }
            for (Vehicle v : u.vehicles) {
                if (v.number.equals(number) && v.model.equals(model)) {
                    Ride ride = new Ride(user, v, origin, dest, seats);
                    offeredRides.add(ride);
                    System.out.println("Ride offered.");
                    return;
                }
            }
        }
    }

    public void selectRide(String user, String origin, String dest, int seats, RideSelectionStrategy strategy) {
        List<Ride> matched = new ArrayList<>();
        for (Ride r : offeredRides) {
            if (r.origin.equals(origin) && r.destination.equals(dest) && r.canAccommodate(seats)) {
                matched.add(r);
            }
        }
        Ride selected = strategy.select(matched);
        if (selected != null) {
            selected.addPassenger(user, seats);
            users.get(user).ridesTaken++;
            System.out.println("Ride selected with vehicle: " + selected.vehicle.model);
        } else {
            System.out.println("No rides found");
        }
    }

    public void endRide(String user, String model, String number) {
        for (Ride r : offeredRides) {
            if (r.owner.equals(user) && r.vehicle.model.equals(model) && r.vehicle.number.equals(number) && r.isActive) {
                r.isActive = false;
                users.get(user).ridesOffered++;
                return;
            }
        }
    }

    public void printStats() {
        for (User u : users.values()) {
            System.out.println(u.name + ": " + u.ridesTaken + " Taken, " + u.ridesOffered + " Offered");
        }
    }
}

public class RideSharingAppDriver {
    public static void main(String[] args) {
        RideManager manager = new RideManager();

        manager.addUser("Rohan", "M", 36);
        manager.addVehicle("Rohan", "Swift", "KA-01-12345");

        manager.addUser("Shashank", "M", 29);
        manager.addVehicle("Shashank", "Baleno", "TS-05-62395");

        manager.addUser("Nandini", "F", 29);

        manager.addUser("Shipra", "F", 27);
        manager.addVehicle("Shipra", "Polo", "KA-05-41491");
        manager.addVehicle("Shipra", "Activa", "KA-12-12332");

        manager.addUser("Gaurav", "M", 29);

        manager.addUser("Rahul", "M", 35);
        manager.addVehicle("Rahul", "XUV", "KA-05-1234");

        manager.offerRide("Rohan", "Hyderabad", "Bangalore", 1, "Swift", "KA-01-12345");
        manager.offerRide("Shipra", "Bangalore", "Mysore", 1, "Activa", "KA-12-12332");
        manager.offerRide("Shipra", "Bangalore", "Mysore", 2, "Polo", "KA-05-41491");
        manager.offerRide("Shashank", "Hyderabad", "Bangalore", 2, "Baleno", "TS-05-62395");
        manager.offerRide("Rahul", "Hyderabad", "Bangalore", 5, "XUV", "KA-05-1234");
        manager.offerRide("Rohan", "Bangalore", "Pune", 1, "Swift", "KA-01-12345"); // should fail

        manager.selectRide("Nandini", "Bangalore", "Mysore", 1, new MostVacantStrategy());
        manager.selectRide("Gaurav", "Bangalore", "Mysore", 1, new PreferredVehicleStrategy("Activa"));
        manager.selectRide("Shashank", "Mumbai", "Bangalore", 1, new MostVacantStrategy());
        manager.selectRide("Rohan", "Hyderabad", "Bangalore", 1, new PreferredVehicleStrategy("Baleno"));
        manager.selectRide("Shashank", "Hyderabad", "Bangalore", 1, new PreferredVehicleStrategy("Polo"));

        manager.endRide("Rohan", "Swift", "KA-01-12345");
        manager.endRide("Shipra", "Activa", "KA-12-12332");
        manager.endRide("Shipra", "Polo", "KA-05-41491");
        manager.endRide("Shashank", "Baleno", "TS-05-62395");

        manager.printStats();
    }
}
